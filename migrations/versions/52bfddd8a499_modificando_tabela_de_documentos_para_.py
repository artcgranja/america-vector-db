"""modificando tabela de documentos para modelo geral

Revision ID: 52bfddd8a499
Revises: 6cfa1636fa9e
Create Date: 2025-06-16 21:38:27.502101

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '52bfddd8a499'
down_revision: Union[str, None] = '6cfa1636fa9e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Removendo tabelas com CASCADE
    op.execute('DROP TABLE IF EXISTS subjects CASCADE')
    op.execute('DROP TABLE IF EXISTS mpvs CASCADE')
    op.execute('DROP TABLE IF EXISTS langchain_pg_collection CASCADE')
    op.execute('DROP TABLE IF EXISTS document_emendas CASCADE')
    op.execute('DROP TABLE IF EXISTS langchain_pg_embedding CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('langchain_pg_embedding',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('langchain_pg_embedding_pkey'))
    )
    op.create_index(op.f('ix_cmetadata_gin'), 'langchain_pg_embedding', ['cmetadata'], unique=False, postgresql_using='gin')
    op.create_table('document_emendas',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('num_emenda', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('apresentada_por', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data_apresentacao', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('chunks_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('vector_store_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('collection_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('summary', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('mpv_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mpv_id'], ['mpvs.id'], name=op.f('document_emendas_mpv_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('document_emendas_pkey'))
    )
    op.create_table('langchain_pg_collection',
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_collection_pkey')),
    sa.UniqueConstraint('name', name=op.f('langchain_pg_collection_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('mpvs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('numero', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ano', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data_publicacao', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('collection_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('summary', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('mpvs_pkey'))
    )
    op.create_table('subjects',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('subjects_pkey'))
    )
    # ### end Alembic commands ###
